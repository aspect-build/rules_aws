load("@aspect_bazel_lib//lib:expand_template.bzl", "expand_template")
load("@aspect_rules_aws//aws:defs.bzl", "s3_sync")

# Allow the destination bucket to vary depending on the stamp information
expand_template(
    name = "release_destination",
    out = "bucket.txt",
    # as an example, use the --embed_label flag to choose a destination bucket, e.g.
    # bazel run --stamp --embed_label=prod123 //my:s3_sync
    # will sync to myorg-prod123-bucket/nested/path
    stamp_substitutions = {"dev": "{{BUILD_EMBED_LABEL}}"},
    # unstamped builds will release nested/path/* in the "dev" bucket
    template = ["myorg-dev-bucket/nested/path"],
)

# Example usages:
# Dry run: show what files would be copied
#  bazel run //examples/release_to_s3 -- --dry_run
# Use a different profile:
#  bazel run //examples/release_to_s3 -- --profile=prod
# Output a metadata JSON file:
#  bazel run //examples/release_to_s3 -- --output_json $PWD/out.json
s3_sync(
    name = "release_to_s3",
    srcs = ["my_file.txt"],
    bucket_file = ":release_destination",
    role = "arn:aws:iam::250292866473:role/AspectEngineering",
)

s3_sync(
    name = "release_to_fixed_path",
    srcs = ["my_file.txt"],
    bucket = "my-bucket-name/sub-folder",
)

##############
# Use case: Copy one file to an exact S3 URI that varies depending on stamping
# See https://github.com/aspect-build/rules_aws/issues/83
destination_uri_file = "dst.txt"

expand_template(
    name = "destination_uri_file",
    out = destination_uri_file,
    # as an example, use the --embed_label flag to choose a destination file, e.g.
    # bazel run --stamp --embed_label=prod123 //my:s3_sync
    # will sync my_file.txt to myorg-bucket/prod123.txt
    stamp_substitutions = {"default": "{{BUILD_EMBED_LABEL}}"},
    # unstamped builds will release my_file.txt to myorg-bucket/default.txt
    template = ["s3://myorg-bucket/default.txt"],
)

s3_sync(
    name = "release_to_stamped_filename",
    srcs = ["my_file.txt"],
    destination_uri_file = destination_uri_file,
)
